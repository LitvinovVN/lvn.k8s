version: '3.7'

services:
  traefik:
    # The latest official supported Traefik docker image
    image: traefik:v2.3
    networks:
      - traefik
      - inbound
    # Enables the Traefik Dashboard and tells Traefik to listen to docker
    # enable --log.level=INFO so we can see what Traefik is doing in the log files
    ports:
      # Exposes port 80 for incomming web requests
      - "80:80"
      - "443:443"
      # The Web UI port http://0.0.0.0:8080 (enabled by --api.insecure=true)
      - "8080:8080"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
      # Copies the Let's Encrypt certificate locally for ease of backing up
      - ./letsencrypt:/letsencrypt
      # Mounts the Traefik static configuration inside the Traefik container
      - ./traefik.metrics.yml:/etc/traefik/traefik.yml
      

  prometheus:
    image: prom/prometheus:v2.22.1
    networks:
      - inbound
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      labels:
       - "traefik.http.routers.prometheus.rule=Host(`prometheus.storage.achii.fvds.ru`)"
       - "traefik.http.routers.prometheus.service=prometheus"
       - "traefik.http.routers.prometheus.entrypoints=web"
       - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
       - "traefik.docker.network=inbound"
      placement:
        constraints:
        - node.role==manager
      restart_policy:
        condition: on-failure
  
  grafana:
    image: grafana/grafana:7.3.1
    networks:
      - inbound
    depends_on:
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    user: "104"
    deploy:
      labels:
        - "traefik.http.routers.grafana.rule=Host(`grafana.storage.achii.fvds.ru`)"
        - "traefik.http.routers.grafana.service=grafana"
        - "traefik.http.routers.grafana.entrypoints=web"
        - "traefik.http.services.grafana.loadbalancer.server.port=3000"
        - "traefik.docker.network=inbound"
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure

# Add the catapp service
  catapp:
     image: mikesir87/cats:1.0
     networks:
      - inbound
     deploy:
      labels:
       - "traefik.http.routers.catapp.rule=Host(`catapp.storage.achii.fvds.ru`)"
       - "traefik.http.routers.catapp.service=catapp"
       - "traefik.http.routers.catapp.entrypoints=web"
       - "traefik.http.routers.catapp.middlewares=test-compress,test-errorpages"
       - "traefik.http.services.catapp.loadbalancer.server.port=5000"
       - "traefik.http.middlewares.test-compress.compress=true"
       - "traefik.http.middlewares.test-errorpages.errors.status=400-599"
       - "traefik.http.middlewares.test-errorpages.errors.service=error"
       - "traefik.http.middlewares.test-errorpages.errors.query=/{status}.html"
       - "traefik.docker.network=inbound"

# Add the blazorapp test service http
  blazorapp1:
     image: litvinovvn/blazorapp1
     networks:
      - inbound
     deploy:
      labels:
       - "traefik.http.routers.blazorapp1.rule=Host(`blazor.storage.achii.fvds.ru`)"
       - "traefik.http.routers.blazorapp1.service=blazorapp1"
       - "traefik.http.routers.blazorapp1.entrypoints=websecure"
       - "traefik.http.routers.blazorapp1.tls.certresolver=myresolver"
       - "traefik.http.routers.blazorapp1.middlewares=test-compress,test-errorpages"
       - "traefik.http.services.blazorapp1.loadbalancer.server.port=80"
       - "traefik.http.middlewares.test-compress.compress=true"
       - "traefik.http.middlewares.test-errorpages.errors.status=400-599"
       - "traefik.http.middlewares.test-errorpages.errors.service=error"
       - "traefik.http.middlewares.test-errorpages.errors.query=/{status}.html"
       - "traefik.docker.network=inbound"

# Error Page service
  error:
    image: guillaumebriday/traefik-custom-error-pages
    networks:
      - inbound
    deploy:
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.error.rule=Host(`error.storage.achii.fvds.ru`)"
        - "traefik.http.routers.error.service=error"
        - "traefik.http.services.error.loadbalancer.server.port=80"
        - "traefik.http.routers.error.entrypoints=web"
        - "traefik.docker.network=inbound"

################################# Databases ######################################
  mysql:
    image: mysql:8.0
    ports:
      - 3306:3306
    networks:
      - inbound
    environment:
      MYSQL_USER: admin
      MYSQL_PASSWORD: password
      MYSQL_DATABASE: test_db
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
    secrets:
      - mysql_root_password

# PHP MyAdmin
  phpmyadmin:
    image: phpmyadmin
    networks:
      - inbound
    ports:
      - 8081:80
    environment:
      PMA_HOST: mysql

# Neo4j
  neo4j:
    image: neo4j:4.2.2
    #restart: unless-stopped
    networks:
      - inbound
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      #- /var/docker/neo4j/conf:/conf
      - /var/docker/neo4j/data:/data
      #- /var/docker/neo4j/import:/import
      #- /var/docker/neo4j/logs:/logs
      #- /var/docker/neo4j/plugins:/plugins
    environment: 
      # Raise memory limits
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms.memory.heap.initial_size=1G
      - NEO4J_dbms_memory_heap_max__size=1G

# MongoDB
  mongo:
    image: mongo
    networks:
      - inbound
    restart: always
    volumes:
      - /var/docker/mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    image: mongo-express
    networks:
      - inbound
    restart: always
    ports:
      - 8082:8081
    volumes:
      - /var/docker/mongo:/data/db
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

  # Nosqlclient (Formerly Mongoclient), MongoDB Management Tool
  # https://hub.docker.com/r/mongoclient/mongoclient - не стартует!
  mongoclient:
    image: mongoclient/mongoclient:4.0.0
    networks:
      - inbound
    restart: always
    ports:
      - 3000:3000
    volumes:
      - /var/docker/mongo:/data/db

  # Redis
  redis:
    container_name: redis
    hostname: redis
    image: redis
    networks:
      - inbound

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    networks:
      - inbound
    restart: always
    environment:
    - REDIS_HOSTS=local:redis:6379
    ports:
    - "8083:8081"

######################## Jenkins #########################
  jenkins:
    image: jenkins/jenkins:lts
    ports:
      - 8084:8080
      - 50000:50000
    # uncomment for docker in docker
    privileged: true
    volumes:
        # enable persistent volume (warning: make sure that the local jenkins_home folder is created)
        - /var/docker/jenkins_home:/var/jenkins_home
        # mount docker sock and binary for docker in docker (only works on linux)
        - /var/run/docker.sock:/var/run/docker.sock
        - /usr/bin/docker:/usr/bin/docker

############## Docker NETWORKS configuration #############
networks:
  traefik:
    driver: overlay
    name: traefik
  inbound:
    driver: overlay
    name: inbound

############## Docker VOLUMES configuration #############
volumes:
    prometheus_data: {}
    grafana_data: {}

############## Docker SECRETS configuration #############
secrets:
  mysql_root_password:
    external: true
